#+TITLE: Emacs 配置文件
#+AUTHOR: Baojie
#+DATE: Time-stamp: <2025-08-31 22:29:39 baojie>
:PROPERTIES:
#+PROPERTY: header-args :tangle yes
#+OPTIONS: toc:2
#+STARTUP: overview
:END:

现在 Emacs 社区已经有了相当多的配置包。
乍一看这些框架都十分全面且易用，但你想改动点什么，就会变得很痛苦。
因为你既要知道“这个软件包在原生 Emacs 里如何引入和配置”，又得熟悉“框架对原生 Emacs 做了什么二次封装”。

一般的软件包会提供前者，所以你要自己学“如何定制你的框架”。

* Early init

大多数Emacs的自定义设置应放在常规初始化文件中。
然而，有时需要让自定义设置在Emacs启动时比常规初始化文件更早生效。
这类自定义可以放在早期初始化文件~/.config/emacs/early-init.el或~/.emacs.d/early-init.el中。
该文件在包系统和GUI初始化之前加载，因此可以在其中自定义影响包初始化过程的变量，如package-enable-at-startup、package-load-list和package-user-dir。请
注意，像package-archives这样仅影响新包安装而不影响已安装包可用性的变量，可以在常规初始化文件中自定义。

不建议将可以留在常规初始化文件中的自定义设置移到early-init.el。
这是因为早期初始化文件在GUI初始化之前读取，因此与GUI功能相关的自定义设置在early-init.el中无法可靠工作。
相比之下，常规初始化文件在GUI初始化之后读取。

Emacs默认带有菜单栏和工具栏。
菜单栏有助于发现更多功能并访问一些常用命令。
工具栏实用性较低，因为它包含的许多命令在菜单栏中已有。
以下代码片段包含了这两个栏以及滚动栏的设置。值为1启用功能，-1则禁用。

#+begin_src emacs-lisp :tangle ~/.emacs.d/early-init.el
;;; early-init.el --- Early Init File -*- lexical-binding: t -*-
;;; Commentary:

;;; Code:

(setq user-full-name "Baojie Jiang"
      user-mail-address "jiangbaojie@gmail.com")

;; 加载较新的 .el 文件。
(setq-default load-prefer-newer t)
;; (setq-default lexical-binding t)
;; (setq lexical-binding t)

;; Delay garbage collection while Emacs is booting
(setq gc-cons-threshold most-positive-fixnum
      gc-cons-percentage 0.5)

;; Schedule garbage collection sensible defaults for after booting
(add-hook 'after-init-hook #'(lambda ()
                               (setq gc-cons-threshold (* 128 1024 1024)
                                     gc-cons-percentage 0.6)))

(setq-default initial-frame-alist default-frame-alist)

(setq inhibit-startup-screen t)

(setq package-enable-at-startup nil)

;; (provide 'early-init)
;;; early-init.el ends here
#+end_src

* Init
:properties:
:header-args: :tangle ~/.emacs.d/init.el
:end:

根据 Emacs Lisp 的规范，所有的源码文件的开头最好写好 docstring，也就是一些关于这个文件的说明。
按照习惯，三个分号开头的注释表示“节”，两个分号开头的注释表示“段落”。
一个分号开头的是一行代码后面的行内注释。
~;;; Code:~ 后面就开始 Emacs Lisp 的代码了。
~;;; init.el ends here~ 是文件的结尾。

#+begin_src emacs-lisp
;;; init.el --- Full configuration -*- lexical-binding: t -*-
;;; Commentary:

;;; Code:
#+end_src

** Package Manager & Package Sources

2012年的 Emacs 24 引入了 package.el 软件包管理器和 ELPA 软件源.

#+begin_src emacs-lisp
(require 'package)

(setq package-archives
      '(("GNU ELPA"     . "https://elpa.gnu.org/packages/")
        ("MELPA"        . "https://melpa.org/packages/")
        ("ORG"          . "https://orgmode.org/elpa/")
        ("MELPA Stable" . "https://stable.melpa.org/packages/")
        ("nongnu"       . "https://elpa.nongnu.org/nongnu/"))
      package-archive-priorities
      '(("GNU ELPA"     . 20)
        ("MELPA"        . 15)
        ("ORG"          . 10)
        ("MELPA Stable" . 5)
        ("nongnu"       . 0)))
(package-initialize)

(setq use-package-always-ensure t)
(setq use-package-enable-imenu-support t)

;;   ;; native 编译。
;; (when (fboundp 'native-compile-async)
;;   (setenv "LIBRARY_PATH"
;;           (concat (getenv "LIBRARY_PATH")
;;                   ":/opt/homebrew/opt/gcc/lib/gcc/current/"
;;                   ":/opt/homebrew/opt/gcc/lib/gcc/current/gcc/aarch64-apple-darwin23/14/"))

;;   (when (and (fboundp 'native-comp-available-p) (native-comp-available-p))
;;     (progn
;;       (setq native-comp-async-report-warnings-errors nil)
;;       (setq native-comp-deferred-compilation t)
;;       (setq native-comp-speed 4)
;;       (setq native-comp-async-jobs-number 8)
;;       (add-to-list 'native-comp-eln-load-path (expand-file-name user-emacs-directory))
;;       (setq package-native-compile t)))
#+end_src

** 环境变量与字符编码格式

#+begin_src emacs-lisp
(use-package exec-path-from-shell
  :ensure t)
(when (memq window-system '(mac ns x))
  (exec-path-from-shell-initialize))

(prefer-coding-system 'utf-8)
(setq locale-coding-system 'utf-8)

(set-language-environment 'utf-8)
(set-default-coding-systems 'utf-8)
(set-buffer-file-coding-system 'utf-8)
(set-clipboard-coding-system 'utf-8)
(set-file-name-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-selection-coding-system 'utf-8)
(modify-coding-system-alist 'process "*" 'utf-8)
;; (setq mac-command-modifier 'meta)
#+end_src

** 优化

当安装新包时，Emacs会显示一个包含字节编译器产生的所有警告的缓冲区（设置包管理器）。
虽然这些信息对开发者很有用，但对用户来说却非常困惑。实际上这些警告涉及的问题与用户无关。
以下代码片段将阻止这些缓冲区弹出。

#+begin_src emacs-lisp :tangle no
(add-to-list 'display-buffer-alist
             '("\\`\\*\\(Warnings\\|Compile-Log\\)\\*\\'"
               (display-buffer-no-window)
               (allow-no-window . t)))
(add-to-list 'display-buffer-alist
             '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
               nil
               (window-parameters (mode-line-format . none))))
#+end_src

提升 IO 性能

#+begin_src emacs-lisp
;; By default, Emacs "updates" its ui more often than it needs to
(setq which-func-update-delay 1.0)
(setq idle-update-delay which-func-update-delay)  ;; Obsolete in >= 30.1

(defalias #'view-hello-file #'ignore)  ; Never show the hello file

(setq read-process-output-max (* 4 1024 1024))

;; Set warning threshold to 512MB before prompting about large files
(setq large-file-warning-threshold (* 512 1024 1024))

;; Disable adaptive buffering for more predictable performance
(setq process-adaptive-read-buffering nil)

(setq inhibit-compacting-font-caches t)
;; (setq-default message-log-max t)

(define-advice keyboard-quit
      (:around (quit) quit-current-context)
    "Quit the current context.

When there is an active minibuffer and we are not inside it close
it.  When we are inside the minibuffer use the regular
`minibuffer-keyboard-quit' which quits any active region before
exiting.  When there is no minibuffer `keyboard-quit' unless we
are defining or executing a macro."
    (if (active-minibuffer-window)
        (if (minibufferp)
            (minibuffer-keyboard-quit)
          (abort-recursive-edit))
      (unless (or defining-kbd-macro
                  executing-kbd-macro)
        (funcall-interactively quit))))
#+end_src

在独立文件保存 Emacs 自动写入的配置参数，避免污染 ~/.emacs 文件

#+begin_src emacs-lisp
(use-package no-littering)

(setq custom-file (no-littering-expand-var-file-name "custom.el"))
(add-hook 'after-init-hook
          (lambda ()
            (when (file-exists-p custom-file)
              (load custom-file))))
#+end_src

** 内置选项

常用设置

#+begin_src emacs-lisp
(setq echo-keystrokes 0.1
      frame-inhibit-implied-resize t
      y-or-n-p-use-read-key t
      use-short-answers t
      apropos-do-all t)

(setq backward-delete-char-untabify-method 'hungry)

(setq kill-do-not-save-duplicates t)
(setq kill-ring-max 512)
(setq kill-whole-line t)

(setq next-line-add-newlines nil)
(setq save-interprogram-paste-before-kill t)

;; paragraphs.el
(setq sentence-end-double-space nil)

(setq initial-scratch-message (format "
  ;;
  ;; ███████╗███╗   ███╗ █████╗  ██████╗███████╗
  ;; ██╔════╝████╗ ████║██╔══██╗██╔════╝██╔════╝
  ;; █████╗  ██╔████╔██║███████║██║     ███████╗
  ;; ██╔══╝  ██║╚██╔╝██║██╔══██║██║     ╚════██║
  ;; ███████╗██║ ╚═╝ ██║██║  ██║╚██████╗███████║
  ;; ╚══════╝╚═╝     ╚═╝╚═╝  ╚═╝ ╚═════╝╚══════╝
  ;;
  ;;   Loading time : %s
  ;;   Packages     : %s
  ;;   Happy, %s  - Emacs ♥ you ♩  !!!
  ;;
  "
                                      (emacs-init-time)
                                      (number-to-string (length package-activated-list))
                                      (user-full-name)))

(setq inhibit-startup-echo-area-message user-login-name
      ;; inhibit-splash-screen t
      inhibit-startup-buffer-menu t
      initial-buffer-choice t
      initial-major-mode 'org-mode
      visible-bell nil
      ring-bell-function 'ignore
      ;; display-time-default-load-average nil
      use-dialog-box nil
      use-file-dialog nil)

(setq-default fill-column 88)

(setq-default word-wrap t)
(setq-default truncate-lines t)

(setq message-truncate-lines t)
#+end_src

基础编辑与常用模式

#+begin_src emacs-lisp
(setq visual-line-fringe-indicators '(left-curly-arrow right-curly-arrow))
(setq word-wrap-by-category t)
;; add the | (= line-breakable) category to the - char.
(modify-category-entry ?- ?| (standard-category-table))

(delete-selection-mode 1)   ;; 当有选中区域时，输入新字符会直接替换选中的文本
(global-so-long-mode 1)     ;; 处理包含极长行的文件，减少卡顿
;; (global-visual-line-mode 1) ;; 视觉换行，不会硬换行，只在窗口边缘自动换行显示
(save-place-mode 1)
#+end_src

最近文件与历史记录

#+begin_src emacs-lisp
;; recentf：记录最近打开的文件
;; recentf-cleanup 清理
(use-package recentf
  :ensure nil
  :hook (after-init . recentf-mode)
  :config
  (setq recentf-save-file (expand-file-name "recentf" no-littering-var-directory)
        ;; recentf-max-menu-items 20
        recentf-max-saved-items 100
        recentf-auto-cleanup 'never)

(setq recentf-keep
      (list
       (lambda (file)
         (let ((full-path (expand-file-name file)))
           (or
            (string-prefix-p (expand-file-name "~/Documents/") full-path)
            (string= (expand-file-name "~/Library/Mobile Documents/com~apple~CloudDocs/EmacsConfigMinimal.org")
                     full-path))))))

  (add-to-list 'recentf-exclude no-littering-var-directory)
  (add-to-list 'recentf-exclude no-littering-etc-directory)
  (add-to-list 'recentf-exclude "\\.\\(el\\|css\\|pdf\\)$"))

;; 添加清理命令
(defun my-clean-recentf ()
  "清理 recentf 并删除保存的文件"
  (interactive)
  (recentf-cleanup)
  (when (file-exists-p recentf-save-file)
    (delete-file recentf-save-file))
  (message "Recentf 缓存已清除"))

;; savehist：保存 minibuffer 的历史输入记录
(use-package savehist
  :ensure nil
  :hook (after-init . savehist-mode)
  :config
  (setq savehist-autosave-interval 300  ;; 每 5 分钟自动保存历史
        savehist-save-minibuffer-history t
        history-length 29)
  (add-to-list 'savehist-additional-variables 'mark-ring)
  (add-to-list 'savehist-additional-variables 'global-mark-ring)
  (add-to-list 'savehist-additional-variables 'extended-command-history))
#+end_src

文件备份

#+begin_src emacs-lisp
(setq make-backup-files t)
(setq version-control t)     ; 使用版本号
(setq kept-new-versions 11)  ; 保留新版本数量
(setq kept-old-versions 5)   ; 保留旧版本数量
(setq backup-by-copying t)
(setq delete-old-versions t
      delete-by-moving-to-trash t)
(setq backup-directory-alist '(("." . ".EmacsBackups")))
#+end_src

自动刷新（Auto Revert）

#+begin_src emacs-lisp
;; 自动检测文件变化并刷新
(setopt auto-revert-avoid-polling t)
(setopt auto-revert-interval 3)
(setopt auto-revert-check-vc-info t)
(setopt auto-revert-verbose nil)
(setopt global-auto-revert-non-file-buffers t) ;; 自动刷新 Dired 等非文件 buffer
(setopt global-auto-revert-mode t)
#+end_src

Tab 与缩进

#+begin_src emacs-lisp
(setq-default indent-tabs-mode nil
              tab-width 4)
#+end_src

** Frame 和光标

#+begin_src emacs-lisp
(setq-default default-frame-alist
              '((menu-bar-lines . 0)
                (tool-bar-lines . 0)
                (vertical-scroll-bars . nil)
                (horizontal-scroll-bars . nil)

                (fullscreen . fullheight)
                (width . 123)

                ;; (alpha . (95 . 95))

                (left-fringe . 11)
                (right-fringe . 11)
                (internal-border-width . 3)))

(setq frame-title-format '("" "%b - (•̀ᴗ•́)و"))

;; (add-hook 'window-setup-hook
;;           (lambda ()
;;             (menu-bar-mode -1)
;;             (tool-bar-mode -1)
;;             (scroll-bar-mode -1)))

(setq-default cursor-in-non-selected-windows nil)
(setq-default highlight-nonselected-windows nil)

(blink-cursor-mode 1)
(setq-default cursor-type 'box)
(setq blink-cursor-interval 0.7)

(setq x-stretch-cursor t)

;; 不在新 frame 打开文件（如 Finder 的 "Open with Emacs") 。
(setq ns-pop-up-frames nil)

;; 复用当前 frame。
(setq display-buffer-reuse-frames t)
(setq frame-resize-pixelwise t)

;; 30: 左右分屏, nil: 上下分屏。
(setq split-width-threshold nil)

(setq switch-to-buffer-obey-display-actions t)
#+end_src

** 分隔符

希望我的分隔符（圆括号、方括号等）能成对高亮显示不同颜色。
[[https://github.com/Fanael/rainbow-delimiters/tree/7919681b0d883502155d5b26e791fec15da6aeca][rainbow-delimiters]]这个工具正好实现了这个功能。

#+begin_src emacs-lisp :tangle no
(use-package rainbow-delimiters
  :hook (prog-mode-hook . rainbow-delimiters-mode))
#+end_src

electric pair

#+begin_src emacs-lisp
(use-package elec-pair
  :ensure nil
  :hook (after-init . electric-pair-mode)
  :config
  (setq electric-pair-preserve-balance t
        electric-pair-delete-adjacent-pairs t
        electric-pair-skip-self 'electric-pair-default-skip-self
        electric-pair-open-newline-between-pairs t))
#+end_src

高亮显示匹配的括号/分隔符

#+begin_src emacs-lisp
(setq show-paren-delay 0.1
      show-paren-highlight-openparen t
      show-paren-when-point-inside-paren nil
      show-paren-when-point-in-periphery t
      show-paren-style 'mixed)

(custom-set-faces
 '(show-paren-match-expression
   ((t (:weight bold :background unspecified))))
 '(show-paren-mismatch
   ((t (:weight bold :underline "#3A243B" :background unspecified :inherit nil)))))

(show-paren-mode 1)
#+end_src

** Line Numbers

#+begin_src emacs-lisp
(setopt display-line-numbers-width 5)
;; (setq display-line-numbers-widen t) ;; 行号区域根据实际需要的宽度自动调整，而不是固定宽度
(setq display-line-numbers-grow-only t)
#+end_src

** Highlight Long Lines

#+begin_src emacs-lisp :tangle no
(setq whitespace-style '(face tabs trailing ines)
      whitespace-line-column 113
      fill-column 80
      whitespace-display-mappings
      '((space-mark 32 [183] [46])
        (newline-mark 10 [36 10])
        (tab-mark 9 [9655 9] [92 9])))
(global-whitespace-mode 1)
#+end_src

** Highlight Cursor Line

#+begin_src emacs-lisp
(use-package hl-line
  :ensure nil
  :hook (after-init . global-hl-line-mode)
  :config
  ;; 按需取消注释以下配置：
  ;; (set-face-background 'hl-line "#8da06c")
  (custom-set-faces '(hl-line ((t (:extend t)))))  ; 延伸高亮到窗口边缘
  ;; make sure to highlight the current line only in the active window.
  (setq hl-line-sticky-flag nil)
  (setq global-hl-line-sticky-flag nil))
#+end_src

** White Space

#+begin_src emacs-lisp
(use-package whitespace
  :ensure nil
  :defer t
  :hook (before-save . whitespace-cleanup))
#+end_src

** Font

#+begin_src emacs-lisp
;; (add-to-list 'default-frame-alist '(font . "Iosevka Comfy-13")) ;; "Iosevka Comfy-13"
(set-face-attribute 'default nil :font (font-spec :family "Iosevka Comfy" :size 13))
(set-face-attribute 'fixed-pitch nil :font (font-spec :family "Iosevka Comfy"))
(set-face-attribute 'variable-pitch nil :font (font-spec :family "Iosevka Comfy Motion"))

(set-face-attribute 'line-number nil :font "JetBrains Mono NL")
(set-face-attribute 'line-number-current-line nil :font (font-spec :family "JetBrains Mono NL" :weight 'bold))
(set-face-attribute 'mode-line-active nil :font (font-spec :family "Iosevka Comfy Motion" :weight 'bold))
(set-face-attribute 'mode-line-inactive nil :font "Iosevka Comfy Motion")
(set-face-attribute 'bold nil :font (font-spec :family "Iosevka Comfy" :weight 'bold))
(set-face-attribute 'italic nil :font (font-spec :family "Iosevka Comfy"))

;; (setq use-default-font-for-symbols nil)
;; (set-fontset-font t 'symbol "Apple Symbols")
;; (set-fontset-font t 'symbol "Symbols Nerd Font Mono")
;; (set-fontset-font t 'emoji "Apple Color Emoji")

(set-fontset-font t 'han (font-spec :family "Inziu Iosevka SC"))
(set-fontset-font t 'cjk-misc (font-spec :family "Inziu Iosevka SC"))
(set-fontset-font t 'bopomofo (font-spec :family "Inziu Iosevka SC"))

;; (set-fontset-font t 'han (font-spec :family "霞鹜文楷"))
;; (set-fontset-font t 'cjk-misc (font-spec :family "霞鹜文楷"))
;; (set-fontset-font t 'bopomofo (font-spec :family "霞鹜文楷"))
;; (set-fontset-font t 'kana (font-spec :family "Sarasa Gothic J"))

;; (add-to-list 'default-frame-alist `(font . ,(face-attribute 'default :font)))
#+end_src

** Icon

#+begin_src emacs-lisp
(use-package all-the-icons)

(use-package all-the-icons-dired
  :diminish
  :hook (dired-mode . all-the-icons-dired-mode))

(use-package all-the-icons-completion
  :after (marginalia all-the-icons)
  :hook (marginalia-mode . all-the-icons-completion-marginalia-setup)
  :init (all-the-icons-completion-mode))

(use-package all-the-icons-ibuffer
  :hook (ibuffer-mode . all-the-icons-ibuffer-mode))

(use-package svg-lib)

(use-package kind-icon
  :after corfu
  :custom
  (kind-icon-use-icons t)
  (kind-icon-default-face 'corfu-default)
  (kind-icon-default-style
   '(:padding 0 :stroke 0 :margin 0 :radius 0 :height 0.9 :scale 0.9))
  :config
  (add-hook 'my-completion-ui-mode-hook
            (lambda ()
              (setq completion-in-region-function
                    (kind-icon-enhance-completion completion-in-region-function))))
  (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter))
#+end_src

** Theme

#+begin_src emacs-lisp
(use-package modus-themes
  :config
  (setq modus-themes-common-palette-user
        '((cherry "#a0134f")
          (plum "#6f459a")
          (apricot "#dfb350")
          (kiwi "#80d458")))
  (setq modus-themes-common-palette-overrides
        '((bg-mode-line-active bg-blue-subtle)
          (fg-mode-line-active fg-main)
          (border-mode-line-active blue-intense)

          (builtin cyan)
          (comment yellow-faint)
          (constant blue-cooler)
          (fnname green-cooler)
          (keyword blue)
          (preprocessor magenta)
          (docstring magenta-faint)
          (string blue-warmer)
          (type magenta-cooler)
          (variable cyan-warmer)
          (rx-escape yellow-cooler)
          (rx-construct red-cooler)

          (cursor apricot)
          (fg-paren-match red-intense)
          ;; (underline-paren-match red-intense)
          (bg-paren-match unspecified)
          (fringe bg-blue-nuanced)
          (fg-line-number-active red-cooler)
          (bg-line-number-inactive bg-blue-nuanced)
          (bg-line-number-active unspecified)))
  (setq modus-themes-italic-constructs t
        modus-themes-bold-constructs nil
        modus-themes-mixed-fonts t
        modus-themes-variable-pitch-ui t
        modus-themes-custom-auto-reload t
        modus-themes-disable-other-themes t)
  (load-theme 'modus-operandi-tritanopia :no-confirm-loading))
#+end_src

** Mode Line

#+begin_src emacs-lisp
(setq column-number-mode t)
(setq line-number-mode t)

(setq-default mode-line-percent-position nil
              mode-line-format (remove 'mode-line-buffer-identification mode-line-format)
              mode-line-compact t)
#+end_src

[[https://github.com/emacsmirror/diminish][diminish]] 该软件包实现了对次要模式显示（轻量级指示器）的隐藏或缩写功能。

#+begin_src emacs-lisp
(use-package diminish)

;; 确保所有 diminish 在对应模式加载后执行
(with-eval-after-load 'highlight-indent-guides
  (diminish 'highlight-indent-guides-mode))

(with-eval-after-load 'which-key
  (diminish 'which-key-mode))

(with-eval-after-load 'whitespace
  (diminish 'whitespace-mode))

(with-eval-after-load 'eldoc-box
  (diminish 'eldoc-box-hover-at-point-mode))

(defun diminish-visual-line-mode ()
  (when (bound-and-true-p visual-line-mode)
    (diminish 'visual-line-mode)))
(add-hook 'visual-line-mode-hook 'diminish-visual-line-mode)

(eval-after-load "eldoc" '(diminish 'eldoc-mode))
(eval-after-load "reftex" '(diminish 'reftex-mode))
(eval-after-load "flyspell" '(diminish 'flyspell-mode))
#+end_src

** Treesit

#+begin_src emacs-lisp
(use-package treesit-auto
  :custom
  (treesit-auto-install 'prompt)
  :config
  (treesit-auto-add-to-auto-mode-alist 'all)
  (global-treesit-auto-mode))
#+end_src

** File Manager
*** Dired

#+begin_src emacs-lisp
(with-eval-after-load 'dired
  (setq dired-x-hands-off-my-keys nil)
  (require 'dired-x))
(use-package dired
  :ensure nil
  ;; :commands (dired)
  :bind
  (:map dired-mode-map
        ("s->" . dired-omit-mode))
  :hook (dired-mode . dired-omit-mode)
  :config
  (diminish 'dired-omit-mode "")
  (setq dired-dwim-target t)
  (setq dired-auto-revert-buffer #'dired-directory-changed-p)
  (setq dired-kill-when-opening-new-dired-buffer t)
  (setq dired-free-space nil)
  (setq dired-clean-up-buffers-too nil)
  (setq dired-hide-details-hide-information-lines nil)
  (setq dired-hide-details-hide-symlink-targets nil)
  ;; (setq dired-mouse-drag-files t)
  (setq dired-no-confirm
        '(byte-compile chgrp chmod chown copy hardlink symlink touch))
  ;; 让 Dired 递归删除目录
  (setq dired-recursive-deletes 'always)
  (setq dired-recursive-copies 'always)
  (setq dired-vc-rename-file t)
  (setq dired-movement-style 'cycle-files)

  (setq dired-use-ls-dired t
        insert-directory-program "gls"
        dired-listing-switches "-laGh1v --time-style=long-iso --group-directories-first --color=always")
  (setq delete-by-moving-to-trash t
        trash-directory "~/.Trash/")

  ;; 文件省略配置
  (setq dired-omit-files
        (concat "^\\.\\{1,2\\}[_A-Za-z]*"
                "\\|^#[_a-z]*#$"
                "\\|\\.\\(json\\|vil\\|zip\\|pdf\\)$"
                "\\|\\.doc[a-z]?$"
                "\\|\\.xls[a-z]?$"
                "\\|\\.ppt[a-z]?$"
                "\\|Thumbs\\.db"
                "\\|desktop\\.ini"
                "\\|flycheck_.*"
                "\\|flymake_.*"))

  ;; (defun xah-dired-init ()
  ;;   "for `dired-mode-hook'."
  ;;   (interactive)
  ;;   (setq word-wrap nil)
  (define-key dired-mode-map (kbd "p") #'dired-up-directory)
  (define-key dired-mode-map (kbd ".") #'dired-hide-details-mode)
  ;; (define-key dired-mode-map (kbd "b") #'dired-do-byte-compile)
  (define-key dired-mode-map (kbd "`") #'dired-flag-backup-files)
  (define-key dired-mode-map (kbd "e") nil)
  (define-key dired-mode-map (kbd "e c") #'dired-do-copy)
  (define-key dired-mode-map (kbd "e g") #'dired-mark-files-containing-regexp)
  (define-key dired-mode-map (kbd "e h") #'dired-hide-details-mode)
  (define-key dired-mode-map (kbd "e m") #'dired-mark-files-regexp)
  (define-key dired-mode-map (kbd "e n") #'dired-create-directory)
  (define-key dired-mode-map (kbd "e r") #'dired-do-rename)
  (define-key dired-mode-map (kbd "e u") #'dired-unmark-all-marks))

;; (add-hook 'dired-mode-hook #'xah-dired-init)
#+end_src

*** Diredfl

;; Diredfl Extra font lock rules for a more colourful dired

#+begin_src emacs-lisp
(use-package diredfl
  :config (diredfl-global-mode t))
#+end_src

*** Wdired

wdierd允许你通过编辑dired buffer的方式来操作文件.

在dired buffer中按下 C-x C-q 就会进入wdired-mode了. 这时你会发现dired
buffer中的文件名部分变得可以编辑了(如果设置了 wdired-allow-to-change-
permissions 为t,那么你还能编辑文件属性).

这时你可以使用Emacs的那些编辑功能任意编辑,将文件名称改成你想要的名字.
然后按下 C-c C-c 就会发现文件被重命名成你想要的名字了. 你还可以在文件
名中添加路径,这样一来可以实现把文件移动到其他目录中去.

如果你把源文件名称删掉而不提供新名字的化,那么 C-c C-c 后这些文件会被添
加上待删除的flag,你只需要再按下 x 就能删掉这些文件了.

若你对这次的改动不满意的话,也可以通过 C-c C-k 取消这次的修改.

#+begin_src emacs-lisp
(use-package wdired
  :commands (wdired-change-to-wdired-mode)
  :config
  (setq wdired-use-interactive-rename t)
  (setq wdired-allow-to-change-permissions t)
  (setq wdired-create-parent-directories t))
#+end_src

*** Diff-mode and Ediff

#+begin_src emacs-lisp
(use-package diff-mode
  :config
  (setq diff-default-read-only t)
  (setq diff-advance-after-apply-hunk t)
  (setq diff-update-on-the-fly t)
  (setq diff-font-lock-syntax 'hunk-also)
  (setq diff-font-lock-prettify nil))

(use-package ediff
  :commands (ediff-buffers ediff-files ediff-buffers3 ediff-files3)
  :init
  (setq ediff-split-window-function 'split-window-horizontally)
  (setq ediff-window-setup-function 'ediff-setup-windows-plain)
  :config
  (setq ediff-keep-variants nil)
  (setq ediff-make-buffers-readonly-at-startup nil)
  (setq ediff-show-clashes-only t))
#+end_src

*** Magit

#+begin_src emacs-lisp
(use-package magit)
#+end_src

** Subword Mode

[[https://wikemacs.org/wiki/Subword-mode][subword-mode]] 允许你将驼峰式命名中的每个子词当作独立单词进行操作。这使得删除和标记函数及变量名的部分变得容易得多。

#+begin_src emacs-lisp
(add-hook 'prog-mode-hook 'subword-mode)
#+end_src

** Scroll

#+begin_src emacs-lisp
(pixel-scroll-precision-mode t)
(setq fast-but-imprecise-scrolling t)
(setq scroll-conservatively 101
      scroll-margin 0
      scroll-preserve-screen-position t)
#+end_src

** 编辑
*** Projectile

#+begin_src emacs-lisp :tangle no
(use-package projectile)

(projectile-mode +1)
;; Recommended keymap prefix on macOS
(define-key projectile-mode-map (kbd "s-p") 'projectile-command-map)
#+end_src

*** Crux

[[https://github.com/bbatsov/crux][crux]] 插件提供一系列的增强，如移动增强、删除增强等优化功能。

#+begin_src emacs-lisp
(use-package crux
  :config
  (crux-with-region-or-buffer indent-region)
  (crux-with-region-or-buffer untabify)
  (crux-with-region-or-point-to-eol kill-ring-save)
  (defalias 'rename-file-and-buffer #'crux-rename-file-and-buffer)
  (global-set-key (kbd "C-M-k") #'crux-kill-whole-line)
  (global-set-key (kbd "C-a") #'crux-move-beginning-of-line)
  (global-set-key (kbd "C-c i") #'crux-find-user-init-file)
  (global-set-key (kbd "C-k") #'crux-smart-kill-line)
  (global-set-key (kbd "C-x C-k") #'crux-kill-other-buffers)
  (global-set-key (kbd "C-x 4 t") #'crux-transpose-windows))
#+end_src

*** Multiple Cursors

[[https://github.com/magnars/multiple-cursors.el][multiple-cursors]]

#+begin_src emacs-lisp :tangle no
(use-package multiple-cursors)
(global-set-key (kbd "C->") 'mc/mark-next-like-this)
(global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
(global-set-key (kbd "C-c <") 'mc/mark-all-like-this)
#+end_src

*** iedit

#+begin_src emacs-lisp
(use-package iedit
  :config
  (defun iedit-dwim (arg)
        "Starts iedit but uses \\[narrow-to-defun] to limit its scope."
        (interactive "P")
        (if arg
                (iedit-mode)
      (save-excursion
                (save-restriction
          (widen)
          ;; this function determines the scope of `iedit-start'.
          (if iedit-mode
              (iedit-done)
                        (narrow-to-defun)
                        (iedit-start (current-word) (point-min) (point-max)))))))
  :bind ("C-;" . iedit-dwim))
#+end_src

*** Expand Region

[[https://github.com/magnars/expand-region.el][expand-region]] 能够按语义单位（如符号、单词、句子、段落）扩展选区（选中的文本）。非常方便！

=M-q= 绑定的是 =fill-paragraph= 功能。我不用这个绑定，但如果你需要的话，可以把它绑定到其他组合键上。

#+begin_src emacs-lisp
(use-package expand-region
  :commands (er/expand-region)
  :bind (("C-=" . er/expand-region)))
#+end_src

*** 中文输入

#+begin_src emacs-lisp
  (use-package rime
    :custom
    (default-input-method "rime")
    ;; (rime-show-candidate 'minibuffer) ;; 可选：'popup 'child-frame 'posframe 'minibuffer
    (rime-emacs-module-header-root "/Applications/Emacs.app/Contents/Resources/include")
    (rime-librime-root "~/.local/librime/dist/")
    (rime-user-data-dir "~/Library/Rime/")  ;; rime-user-data-dir "~/.local/rime-data/"
    :config
    (setq-default mode-line-mule-info
                  '(""
                    (current-input-method
                     (:propertize
                      (:eval (my/rime-lighter))
                      help-echo
                      (concat "输入法: " current-input-method
                              "\nmouse-2: Disable input method"
                              "\nmouse-3: Describe current input method")
                      local-map
                      (keymap
                       (mode-line keymap
                                  (mouse-3 . describe-current-input-method)
                                  (mouse-2 . toggle-input-method)))
                      mouse-face mode-line-highlight))
                    #("%z" 0 2
                      (help-echo mode-line-mule-info-help-echo
                                 mouse-face mode-line-highlight
                                 local-map (keymap
                                            (mode-line keymap
                                                       (mouse-3 . describe-current-coding-system)
                                                       (mouse-1 . cycle-coding-system)))))
                    (:eval (mode-line-eol-desc))))

    (defun my/rime-lighter ()
      "Return CH/EN depending on Rime status."
      (if (and (rime--should-enable-p)
               (not (rime--should-inline-ascii-p))
               current-input-method)
          (propertize "CH " 'face '(:foreground "#003366" :weight bold))
        (propertize "EN " 'face '(:foreground "#CC6600" :weight bold))))

    (setq rime-translate-keybindings '("<left>" "<right>" "<up>" "<down>"))
    (setq rime-inline-ascii-trigger 'shift-r)
    ;; (setq rime-inline-ascii-holder ?x)

    (defvar my/default-cursor-color (frame-parameter nil 'cursor-color)
      "默认光标颜色")

    (defvar my/input-method-cursor-color "#a0134f"
      "输入法激活时的光标颜色")

    (defun my/update-cursor-color ()
      "根据输入法状态更新光标颜色"
      (set-cursor-color
       (if (and (rime--should-enable-p)
                (not (rime--should-inline-ascii-p))
                current-input-method)
           my/input-method-cursor-color
         my/default-cursor-color)))

    (add-hook 'post-command-hook #'my/update-cursor-color)

    (setq rime-cursor "˰")

    (setq rime-disable-predicates '(;; my/rime-predicate-force-ascii-once
                                    rime-predicate-after-alphabet-char-p
                                    rime-predicate-space-after-cc-p
                                    rime-predicate-tex-math-or-command-p))

    (define-key rime-mode-map (kbd "C-`") 'rime-force-enable)

    (set-face-attribute 'rime-default-face nil
                        :font "霞鹜文楷"
                        :foreground "#a0134f"
                        :background 'unspecified)
    (set-face-attribute 'rime-candidate-num-face nil :font "JetBrains Mono NL")
    (custom-set-faces
     `(rime-preedit-face
       ((t (:font ,(font-spec :family "霞鹜文楷" :weight 'bold)
                  :foreground "#a0134f"
                  :background unspecified))))))
#+end_src

** Buffer
*** Minibuffer

#+begin_src emacs-lisp
(use-package emacs
  :ensure nil
  :custom
  (context-menu-mode t)
  (read-extended-command-predicate #'command-completion-default-include-p))

(setq completion-lazy-hilit t)
(setq completion-show-help nil)
(setq completion-auto-help t)
(setq completion-auto-select t) ;; 'second-tab
(setq completion-show-inline-help nil)
(setq completion-ignore-case t)

(setq completions-format 'vertical)
(setq completions-group t)
(setq completions-detailed t)
(setq completions-max-height 10)
;; (setq completions-header-format (propertize "%s candidates:\n" 'face 'font-lock-comment-face))
(setq completions-highlight-face 'completions-highlight)

(setq enable-recursive-minibuffers t)
(setq read-file-name-completion-ignore-case t)
(setq read-buffer-completion-ignore-case t)

;; Keep the cursor out of the read-only portions of the.minibuffer
(setq minibuffer-prompt-properties
      '(read-only t intangible t cursor-intangible t face minibuffer-prompt))
(add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

(setq read-minibuffer-restore-windows nil) ; Emacs 28
(minibuffer-depth-indicate-mode 1)

(setq minibuffer-default-prompt-format " [%s]") ; Emacs 29
(minibuffer-electric-default-mode 1)

;; 在 *Completions* buffer 里 RET 插入候选项 不退出 minibuffer 不关闭 completions 光标自动回到 minibuffer
(defun my/minibuffer-choose-completion-no-exit-quit ()
  "In *Completions* buffer: choose candidate but keep completions window."
  (interactive)
  (minibuffer-choose-completion t t)
  (switch-to-minibuffer))

(define-key completion-list-mode-map (kbd "RET")
            #'my/minibuffer-choose-completion-no-exit-quit)
#+end_src

*** Uniquify Buffers

确保当缓冲区中存在同名文件时使用唯一名称. 例如：当你同时打开不同项目中的多个"main.rs"文件时. 检测到同名文件时会自动添加"myproj/main.rs"前缀

#+begin_src emacs-lisp
(use-package uniquify
  :ensure nil
  :config
  (setq uniquify-buffer-name-style 'forward)
  (setq uniquify-strip-common-suffix t)
  (setq uniquify-after-kill-buffer-p t))
#+end_src

*** IBuffer

#+begin_src emacs-lisp
(setq ibuffer-saved-filter-groups
      '(("default"
         ("GIT" (or (name . "^magit")
                    (name . "^ediff")
                    (name . "\\.git")))
         ("jsx/tsx" (or (name . "\\.jsx")
                        (name . "\\.tsx")))
         ("js/ts" (or (name . "\\.js")
                      (name . "\\.mjs")
                      (name . "\\.cjs")
                      (name . "\\.ts")))
         ("Web" (or (mode . html-mode)
                        (name . "\\.html")
                        (name . "\\.njk")
                        (mode . jinja2-mode)))
         ("CSS" (or (mode . css-mode)
                    (mode . scss-mode)
                    (mode . sass-mode)
                    (name . "\\.css")
                    (name . "\\.scss")
                    (name . "\\.sass")))
         ("C" (or (mode . c++-mode)
                  (mode . c-mode)))
         ("Python" (or (mode . python-mode)
                       (name . "\\.py")))
         ("JSON/YAML/Config" (or (mode . json-mode)
                                 (name . "\\.json")
                                 (mode . yaml-mode)
                                 (name . "\\.yaml")
                                 (mode . kintaro-mode)
                                 (name . "\\.ksdl")))
          ("TeX" (mode . LaTeX-mode))
         ("SVG" (name . "\\.svg"))
         ("ERC" (mode . erc-mode))
         ("find" (or (mode . xref-mode)
                     (mode . dired-mode)))
         ("emacs-config" (or (name . "emacs-config")
                             (name . "djr-init")
                             (name . "README.org")
                             (name . "init.el")))
         ("Org" (mode . org-mode))
         ("lisp" (or (name . "\\.lisp")
                     (name . "\\.lsp")
                     (name . "\\.el")
                     (name . "\\.asd")
                     (name . "\\.clm")
                     (mode . lisp-mode)))
         ("Shell Scripts" (or (name . "\\.sh")
                              (mode . "sh-mode")))
         ("Shells/Terminals/REPLs" (or (name . "\\*eshell\\*")
                                       (name . "\\*terminal\\*")
                                       (name . "\\*slime-repl sbcl\\*")
                                       (name . "\\*shell\\*")
                                       (name . "\\*vterm")))
         ("Logs" (or (name . "\\*Messages\\*")
                     (name . "\\*slime-events\\*")
                     (name . "\\*inferior-lisp\\*")
                     (name . "\\*lsp")
                     (name . "\\*jsts")
                     (name . "\\*tide")
                     (name . "\\*eslint")))
         ("Help" (or (name . "\\*Help\\*")
                     (name . "\\*Apropos\\*")
                     (name . "\\*Completions\\*")
                     (name . "\\*info\\*")))
         ("Misc" (or  (name . "untitled")
                      (name . "\\*scratch\\*"))))))

(setq ibuffer-show-empty-filter-groups nil) ; don't show empty groups
(setq ibuffer-filter-group-name-face '(:inherit (success bold)))
(setq ibuffer-formats
      '((mark modified read-only locked
              " " (name 18 18 :left :elide)
              " " (size 9 -1 :right)
              " " (mode 16 16 :right :elide)
              " " filename-and-process)
        (mark " " (name 16 -1) " " filename)))
(setq ibuffer-default-shrink-to-minimum-size t)
(setq ibuffer-use-other-window t)

(add-hook 'ibuffer-mode-hook
           #'(lambda ()
            (ibuffer-switch-to-saved-filter-groups "default")
            (display-line-numbers-mode -1)))
#+end_src

*** Helpful

[[https://github.com/Wilfred/helpful][Helpful]] is an improvement on Emacs' built-in *help* buffer. It's more user-friendly and easier to read.

#+begin_src emacs-lisp
(use-package helpful
  :bind
  ([remap describe-command] . helpful-command)
  ([remap describe-key] . helpful-key)
  :config
  ;; (setq help-enable-completion-autoload nil)
  ;; (setq help-enable-autoload nil)
  ;; (setq help-enable-symbol-autoload nil)
  ;; (setq help-window-select t)  ;; Focus new help windows when opened
  (global-set-key (kbd "C-h f") #'helpful-function)
  (global-set-key (kbd "C-h v") #'helpful-variable)
  (global-set-key (kbd "C-h k") #'helpful-key)
  (global-set-key (kbd "C-h x") #'helpful-command)
  (global-set-key (kbd "C-c C-d") #'helpful-at-point)
  (global-set-key (kbd "C-h F") #'helpful-function))
#+end_src

*** Display Buffer

#+begin_src emacs-lisp :tangle no
(add-to-list 'display-buffer-alist
             '("\\*e?shell\\*"
               (display-buffer-in-side-window)
               (side . bottom)
               (slot . -1) ;; -1 == L  0 == Mid 1 == R
               (window-height . 0.33) ;; 底部左侧占 2/3
               (window-parameters
                (no-delete-other-windows . nil))))

(add-to-list 'display-buffer-alist
             '("\\*\\(Backtrace\\|Compile-log\\|Messages\\|Warnings\\)\\*"
               (display-buffer-in-side-window)
               (side . bottom)
               (slot . 0)
               (window-height . 0.33)))

(add-to-list 'display-buffer-alist
             '("\\*\\([Hh]elp\\|Command History\\|command-log\\)\\*"
               (display-buffer-in-side-window)
               (side . bottom)
               (slot . 0)
                (window-height . 0.33) ))

(add-to-list 'display-buffer-alist
             '("\\*TeX errors\\*"
               (display-buffer-in-side-window)
               (side . bottom)
               (slot . 3)
               (window-height . shrink-window-if-larger-than-buffer)
               (dedicated . t)))

(add-to-list 'display-buffer-alist
             '("\\*TeX Help\\*"
               (display-buffer-in-side-window)
               (side . bottom)
               (slot . 4)
               (window-height . shrink-window-if-larger-than-buffer)
               (dedicated . t)))
#+end_src

** Eldoc

[[https://www.gnu.org/software/emacs/manual/html_node/emacs/Programming-Language-Doc.html][Eldoc]] 是 Emacs 内置的语言文档功能。在你编程时，它会根据情况显示函数文档。

#+begin_src emacs-lisp
(use-package eldoc
  :ensure nil                                ;; This is built-in, no need to fetch it.
  :config
  (setq eldoc-idle-delay 0)                  ;; Automatically fetch doc help
  (setq eldoc-echo-area-use-multiline-p nil) ;; We use the "K" floating help instead
                                             ;; set to t if you want docs on the echo area
  (setq eldoc-echo-area-display-truncation-message nil)
  :init
  (global-eldoc-mode))
#+end_src

** Eldoc-box

#+begin_src emacs-lisp
(use-package eldoc-box
  ;; :ensure nil
  :after (eglot eldoc)
  :bind
  (:map eglot-mode-map
        ("C-M-k" . (lambda () (interactive) (scroll-eldoc-box-frame ?u)))
        ("C-M-j" . (lambda () (interactive) (scroll-eldoc-box-frame ?d)))
        ;; 按需弹出 posframe 来显示 eldoc buffer 内容。
        ("C-c C-d" . eldoc-box-help-at-point)
        )
  :config
  (setq eldoc-box-max-pixel-height 600)
  (setq eldoc-box-max-pixel-width 1200)

  ;; C-g 关闭弹出的 child frame。
  (setq eldoc-box-clear-with-C-g t)

  ;; 滚动显示 *eldoc-doc* child frame 中的内容。
  (defun scroll-eldoc-box-frame (direction)
    (interactive "cScroll direction (u for up, d for down): ")
    (let ((frame (get-buffer-window " *eldoc-box*" t)))
      (when frame
        (with-selected-window frame
          (cond ((eq direction ?u) (scroll-down-line))
                ((eq direction ?d) (scroll-up-line)))))))

  ;; 在右上角显示 eldoc 帮助；
  ;;(add-hook 'eglot-managed-mode-hook #'eldoc-box-hover-mode t)

  ;; 在光标位置显示 eldoc 帮助；
  ;;(add-hook 'eglot-managed-mode-hook #'eldoc-box-hover-at-point-mode t)
  )
#+end_src

** Vertico

#+begin_src emacs-lisp
(defcustom my-filter-enabled t
  "Whether to enable filtering of files matching `dired-omit-files' pattern."
  :type 'boolean
  :group 'my-vertico-settings)

;; 修改过滤函数以检查控制变量
(defun my-filter-completion (old-function string pred action)
  "Around advice for completion-file-name-table to filter out files matching `dired-omit-files'."
  (let ((result (funcall old-function string pred action)))
    ;; 只在需要时进行过滤，并且过滤功能已启用
    (when (and my-filter-enabled
               (or (eq action t) (null action))
               (listp result)
               (boundp 'dired-omit-files)
               dired-omit-files
               (not (string-empty-p dired-omit-files)))
      (setq result
            (if (stringp (car result))
                ;; 简单字符串列表
                (cl-remove-if (lambda (f) (string-match-p dired-omit-files f)) result)
              ;; 可能带有元数据的列表
              (cl-remove-if (lambda (item)
                              (and (stringp (car item))
                                   (string-match-p dired-omit-files (car item))))
                            result))))
    result))

(advice-add 'completion-file-name-table :around #'my-filter-completion)

(defun my-toggle-filter ()
  "Toggle filtering of files matching `dired-omit-files' pattern."
  (interactive)
  (setq my-filter-enabled (not my-filter-enabled))
  (message "%s" (if my-filter-enabled "隐藏" "显示"))
  ;; 尝试刷新当前 Vertico 会话
  (when (minibufferp)
    (condition-case err
        (progn
          (setq vertico--input (minibuffer-contents))
          (vertico--exhibit))
      (error
       (message "刷新 Vertico 失败: %s" err)
       ;; 尝试备选刷新方法
       (let ((current-input (minibuffer-contents)))
         (delete-minibuffer-contents)
         (insert current-input))))))

(use-package vertico
  :init
  (vertico-mode)
  (vertico-multiform-mode)
  :hook (rfn-eshadow-update-overlay . vertico-directory-tidy)
  :bind (:map vertico-map
              ("RET" . vertico-directory-enter)
              ("DEL" . vertico-directory-delete-char)
              ("M-DEL" . vertico-directory-delete-word)
              ("." . my-toggle-filter))
  :custom
  ;; (vertico-count 10)
  (vertico-resize nil)
  (vertico-grid-lookahead 50)
  (vertico-grid-max-columns 5)
  ;; (vertico-sort-function 'vertico-sort-history-alpha)
  (vertico-buffer-display-action '((display-buffer-in-side-window)
                                   (side . right)
                                   (slot . 10)))
  :config
  (add-hook 'minibuffer-setup-hook #'vertico-repeat-save)

  (advice-add #'completing-read-multiple :filter-args
              (lambda (args)
                (cons (format "[CRM%s] %s"
                              (string-replace "[ \t]*" "" crm-separator)
                              (car args))
                      (cdr args))))

  (cl-defmethod vertico--format-candidate :around
    (cand prefix suffix index start &context ((not (bound-and-true-p vertico-flat-mode))
                                              (eql t)))
    (setq cand (cl-call-next-method cand prefix suffix index start))
    (if (bound-and-true-p vertico-grid-mode)
        (if (= vertico--index index)
            (concat #("»" 0 1 (face (:foreground "dark magenta" :weight bold))) cand)
          (concat #("_" 0 1 (display " ")) cand))
      (concat
       (if (= vertico--index index)
           (propertize "»" 'face '(:foreground "dark magenta" :weight bold))
         " ")
       cand)))

  (defvar +vertico-transform-functions nil)

  (cl-defmethod vertico--format-candidate :around
    (cand prefix suffix index start &context ((not +vertico-transform-functions) null))
    (dolist (fun (ensure-list +vertico-transform-functions))
      (setq cand (funcall fun cand)))
    (cl-call-next-method cand prefix suffix index start))

  (defun +vertico-highlight-directory (file)
    "If FILE ends with a slash, highlight it as a directory."
    (if (string-suffix-p "/" file)
        (propertize file 'face 'dired-directory) ; or face 'dired-directory 'marginalia-file-priv-dir
      file))

  ;; function to highlight enabled modes similar to counsel-M-x
  (defun +vertico-highlight-enabled-mode (cmd)
    "If MODE is enabled, highlight it as font-lock-constant-face."
    (let ((sym (intern cmd)))
      (if (or (eq sym major-mode)
              (and
               (memq sym minor-mode-list)
               (boundp sym)))
          (propertize cmd 'face 'font-lock-constant-face)
        cmd)))

  (setq vertico-multiform-commands
        '((consult-line
           reverse
           (vertico-sort-override-function . vertico-sort-alpha))
          (consult-outline buffer ,(lambda (_) (text-scale-set -1)))
          (consult-buffer (vertico-resize . t) reverse)
          (describe-symbol (vertico-sort-function . vertico-sort-alpha))
          (consult-xref grid)
          (LaTeX-section flat)
          (LaTeX-environment indexed grid)
          (TeX-insert-macro indexed grid)
          (TeX--completion-at-point indexed grid)
          (LaTeX-arguments-completion-at-point indexed grid)
          (execute-extended-command
           reverse
           (+vertico-transform-functions . +vertico-highlight-enabled-mode))))

  (setq vertico-multiform-categories
        '((symbol (vertico-sort-function . vertico-sort-alpha))
          (file
           (vertico-sort-function . vertico-sort-directories-first)
           (+vertico-transform-functions . +vertico-highlight-directory))))

  (defun my/vertico-truncate-candidates (args)
    (if-let ((arg (car args))
             (type (get-text-property 0 'multi-category arg))
             ((eq (car-safe type) 'file))
             (w (max 19 (- (window-width) 100))) ;; 计算最大显示宽度 w， (窗口宽度=123)
             (l (length arg))
             ((> l w)))
        (setcar args (concat "…" (truncate-string-to-width arg l (- l w)))))
    args)
  (advice-add #'vertico--format-candidate :filter-args #'my/vertico-truncate-candidates))
#+end_src

** Orderless

#+begin_src emacs-lisp
(use-package orderless
  :config
  (defun +orderless--consult-suffix ()
    "Regexp which matches the end of string with Consult tofu support."
    (if (boundp 'consult--tofu-regexp)
        (concat consult--tofu-regexp "*\\'")
      "\\'"))

  (defun +orderless-consult-dispatch (word _index _total)
    (cond
     ((string-suffix-p "$" word)
      `(orderless-regexp . ,(concat (substring word 0 -1) (+orderless--consult-suffix))))
     ((and (or minibuffer-completing-file-name
               (derived-mode-p 'eshell-mode))
           (string-match-p "\\`\\.." word))
      `(orderless-regexp . ,(concat "\\." (substring word 1) (+orderless--consult-suffix))))))

  (orderless-define-completion-style +orderless-with-initialism
    (orderless-matching-styles '(orderless-initialism orderless-literal orderless-regexp)))

  (setq completion-styles '(orderless basic)
        completion-category-defaults nil
        orderless-component-separator #'orderless-escapable-split-on-space
        orderless-style-dispatchers (list #'+orderless-consult-dispatch
                                          #'orderless-kwd-dispatch
                                          #'orderless-affix-dispatch)
        completion-category-overrides '((file (styles partial-completion))
                                        (command (styles +orderless-with-initialism))
                                        (variable (styles +orderless-with-initialism))
                                        (symbol (styles +orderless-with-initialism)))))
#+end_src

** Marginalia

 [[https://github.com/minad/marginalia][Marginalia]] 插件给迷你缓冲区的补全候选条目添加一些提示信息。

#+begin_src emacs-lisp
(use-package marginalia
  :hook (after-init . marginalia-mode))
#+end_src

** Corfu

#+begin_src emacs-lisp
(setq text-mode-ispell-word-completion nil)

(use-package corfu
  :hook (after-init . global-corfu-mode)
  ;; :hook ((prog-mode . corfu-mode)
  ;;        (org-mode . corfu-mode)
  ;;        (eshell-mode . corfu-mode))
  :custom
  (corfu-auto t)
  (corfu-count 11)
  (corfu-separator ?\s)
  (corfu-quit-no-match 'separator)
  :config
  (corfu-popupinfo-mode t)
  (with-eval-after-load 'savehist
    (corfu-history-mode t)
    (add-to-list 'savehist-additional-variables 'corfu-history)))
#+end_src

** Cape

#+begin_src emacs-lisp
(use-package cape)
(add-hook 'completion-at-point-functions #'cape-dabbrev)
(add-hook 'completion-at-point-functions #'cape-file)
(add-hook 'completion-at-point-functions #'cape-elisp-block)
;; (add-hook 'completion-at-point-functions #'LaTeX-arguments-completion-at-point t t)
(defun cape-dabbrev-dict-keyword ()
  (cape-wrap-super #'cape-dabbrev #'cape-dict #'cape-keyword))
(setq-local completion-at-point-functions (list #'cape-dabbrev-dict-keyword))
#+end_src

** Consult

#+begin_src emacs-lisp
(use-package consult
  :bind (("M-s M-g" . consult-grep)
         ("M-s M-f" . consult-find)
         ("M-s M-o" . consult-outline)
         ("M-s M-l" . consult-line)
         ("M-s M-b" . consult-buffer))
  :init
  (setq register-preview-delay 0.5
        register-preview-function #'consult-register-format)

  (advice-add #'register-preview :override #'consult-register-window)
  (advice-add #'completing-read-multiple :override #'consult-completing-read-multiple)

  ;; Use Consult to select xref locations with preview
  (setq xref-show-xrefs-function #'consult-xref
        xref-show-definitions-function #'consult-xref)

  :config
  (add-hook 'completion-list-mode-hook #'consult-preview-at-point-mode)
  (add-hook 'embark-collect-mode-hook #'consult-preview-at-point-mode)

  (consult-customize
   consult-theme
   :preview-key '(:debounce 0.2 any)
   consult-ripgrep consult-git-grep consult-grep
   consult-bookmark consult-recent-file consult-xref
   consult--source-bookmark consult--source-recent-file
   consult--source-project-recent-file
   :preview-key "M-.")

  (defun my-consult--source-recentf-items-uniq ()
    (let ((ht (consult--buffer-file-hash))
          file-name-handler-alist ;; No Tramp slowdown please.
          items)
      (dolist (file (my-recentf-list-uniq) (nreverse items))
        ;; Emacs 29 abbreviates file paths by default, see
        ;; `recentf-filename-handlers'.
        (unless (eq (aref (cdr file) 0) ?/)
          (setcdr file (expand-file-name (cdr file))))
        (unless (gethash (cdr file) ht)
          (push (propertize
                 (car file)
                 'multi-category `(file . ,(cdr file)))
                items)))))

  (plist-put consult--source-recent-file
             :items #'my-consult--source-recentf-items-uniq)

  (defun my-recentf-list-uniq ()
    (let* ((proposed (mapcar (lambda (f)
                               (cons (file-name-nondirectory f) f))
                             recentf-list))
           (recentf-uniq proposed)
           conflicts resol file)
      ;; collect conflicts
      (while proposed
        (setq file (pop proposed))
        (if (assoc (car file) conflicts)
            (push (cdr file) (cdr (assoc (car file) conflicts)))
          (if (assoc (car file) proposed)
              (push (list (car file) (cdr file)) conflicts))))
      ;; resolve conflicts
      (dolist (name conflicts)
        (let* ((files (mapcar (lambda (f)
                                ;; data structure:
                                ;; (file remaining-path curr-propos)
                                (list f
                                      (file-name-directory f)
                                      (file-name-nondirectory f)))
                              (cdr name)))
               (curr-step (mapcar (lambda (f)
                                    (file-name-nondirectory
                                     (directory-file-name (cadr f))))
                                  files)))
          ;; Quick check, if there are no duplicates, we are done.
          (if (eq (length curr-step) (length (seq-uniq curr-step)))
              (setq resol
                    (append resol
                            (mapcar (lambda (f)
                                      (cons (car f)
                                            (file-name-concat
                                             (file-name-nondirectory
                                              (directory-file-name (cadr f)))
                                             (file-name-nondirectory (car f)))))
                                    files)))
            (while files
              (let (files-remain)
                (dolist (file files)
                  (let ((curr-propos (caddr file))
                        (curr-part (file-name-nondirectory
                                    (directory-file-name (cadr file))))
                        (rest-path (file-name-directory
                                    (directory-file-name (cadr file))))
                        (curr-step
                         (mapcar (lambda (f)
                                   (file-name-nondirectory
                                    (directory-file-name (cadr f))))
                                 files)))
                    (cond ((length= (seq-uniq curr-step) 1)
                           ;; If all elements of curr-step are equal, we skip
                           ;; this path part.
                           (push (list (car file)
                                       rest-path
                                       curr-propos)
                                 files-remain))
                          ((member curr-part (cdr (member curr-part curr-step)))
                           ;; There is more than one curr-part in curr-step
                           ;; for this candidate.
                           (push (list (car file)
                                       rest-path
                                       (file-name-concat curr-part curr-propos))
                                 files-remain))
                          (t
                           ;; There is no repetition of curr-part in curr-step
                           ;; for this candidate.
                           (push (cons (car file)
                                       (file-name-concat curr-part curr-propos))
                                 resol)))))
                (setq files files-remain))))))
      ;; apply resolved conflicts
      (let (items)
        (dolist (file recentf-uniq (nreverse items))
          (let ((curr-resol (assoc (cdr file) resol)))
            (if curr-resol
                (push (cons (cdr curr-resol) (cdr file)) items)
              (push file items))))))))

;; (setq completion-in-region-function #'consult-completion-in-region)
#+end_src

** Embark

#+begin_src emacs-lisp
(use-package embark
  :bind
  (("C-." . embark-act)         ;; pick some comfortable binding
   ("M-;" . embark-dwim)        ;; good alternative: M-.
   ("C-h B" . embark-bindings)) ;; alternative for `describe-bindings'
  :init
  (setq prefix-help-command #'embark-prefix-help-command)
  (setq eldoc-documentation-strategy #'eldoc-documentation-compose-eagerly))

(use-package embark-consult
  :after (consult embark)
  :hook (embark-collect-mode . consult-preview-at-point-mode))
#+end_src

** Spell Check
*** Flymake
#+begin_src emacs-lisp
(use-package flymake
  :custom
  (flymake-margin-indicators-string
   '((error "!»" compilation-error) (warning "»" compilation-warning)
     (note "»" compilation-info)))
  :config
  (setq flymake-no-changes-timeout nil)
  ;; (setq flymake-show-diagnostics-at-end-of-line 'short)

  ;; 显示诊断错误列表
  (global-set-key (kbd "M-s M-c") #'consult-flymake)
  (define-key flymake-mode-map (kbd "M-g e") #'flymake-show-buffer-diagnostics)
  (define-key flymake-mode-map (kbd "M-s n") #'flymake-goto-next-error)
  (define-key flymake-mode-map (kbd "M-s p") #'flymake-goto-prev-error)
  ;; style the flymake widget in the modeline
(setq flymake-mode-line-format
      '(" " "" flymake-mode-line-exception flymake-mode-line-counters)))

;; (setq elisp-flymake-byte-compile-load-path
;;       (append elisp-flymake-byte-compile-load-path load-path))
;; disable the legacy backend
;; (remove-hook 'flymake-diagnostic-functions #'flymake-proc-legacy-flymake)

;; stop when first/last error is reached
;; (setq flymake-wrap-around t)
#+end_src

*** Flyspell

#+begin_src emacs-lisp :tangle no
(use-package flyspell
  :diminish)

;; Spelling
(setq flyspell-issue-welcome-flag nil)

(setq ispell-dictionary "english")
(setq-default ispell-program-name "aspell")
(setq-default ispell-extra-args '("--sug-mode=ultra" "--lang=en_US"))
(setq spell-full-directory "~/.ispelldic")
(setq ispell-personal-dictionary "~/.ispelldic/.pws")

;; Dictionary
(setq +lookup-dictionary-provider 'define-word)

(add-to-list 'ispell-skip-region-alist '(":\\(PROPERTIES\\|LOGBOOK\\):" . ":END:"))
(add-to-list 'ispell-skip-region-alist '("#\\+BEGIN_SRC" . "#\\+END_SRC"))
(add-to-list 'ispell-skip-region-alist '("#\\+BEGIN_EXAMPLE" . "#\\+END_EXAMPLE"))
#+end_src

** Yasnippet

#+begin_src emacs-lisp
(use-package yasnippet
  :config
  ;; (add-hook 'yas-minor-mode-hook (lambda () (yas-activate-extra-mode 'fundamental-mode)))
  ;; Suppress warning for yasnippet code.
  (require 'warnings)
  (add-to-list 'warning-suppress-types '(yasnippet backquote-change))
  (add-to-list 'yas-snippet-dirs (expand-file-name "~/Library/Mobile Documents/com~apple~CloudDocs/snippets"))
  (yas-reload-all))
#+end_src

** Eglot

#+begin_src emacs-lisp :tangle no
(use-package eglot
  ;; :diminish
  :preface
  (defun mp-eglot-eldoc ()
    ;; Show flymake diagnostics first.
    (setq eldoc-documentation-functions
          (cons #'flymake-eldoc-function
                (remove #'flymake-eldoc-function eldoc-documentation-functions)))
    :hook ((eglot-managed-mode . mp-eglot-eldoc))
    :config
    (add-to-list 'eglot-server-programs '(latex-mode . ("~/.local/bin/digestif")))
    ;; (add-to-list 'eglot-server-programs '(LaTeX-mode . ("digestif")))
    ;; (add-to-list 'eglot-server-programs '(LaTeX-mode . ("texlab")))
    (add-to-list 'Info-directory-list "/usr/local/texlive/2025/texmf-dist/doc/info")
    :custom
    ;; (fset #'jsonrpc--log-event #'ignore)
    (eglot-events-buffer-size 0))

  ;; (add-hook 'eglot-managed-mode-hook #'eldoc-box-hover-at-point-mode t)
  ;; (add-hook 'eglot-managed-mode-hook 'eldoc-doc-buffer)

  ;; (with-eval-after-load 'eglot
  ;;   (setq completion-category-defaults nil))

  (advice-add 'eglot-completion-at-point :around #'cape-wrap-buster)

  (setq-default eglot-workspace-configuration
                '((haskell (maxCompletions . 200))))

  (defun my/eglot-capf ()
    (setq-local completion-at-point-functions
                (list (cape-capf-super
                       #'eglot-completion-at-point
                       ;; #'tempel-expand
                       #'cape-file))))

  (add-hook 'eglot-managed-mode-hook #'my/eglot-capf))

  (use-package consult-eglot
    :after (consult eglot))
#+end_src

** Emacs Lisp

The holy trinity of Elisp libraries: [[https://github.com/magnars/dash.el][dash]] (lists), [[https://github.com/magnars/s.el][s]] (strings), and [[https://github.com/rejeep/f.el][f]] (files).

#+begin_src emacs-lisp
(use-package dash
  :ensure nil)

(use-package s
  :ensure nil)

(use-package f
  :ensure nil)
#+end_src

** Org

#+begin_src emacs-lisp
;; (require 'org-indent)
(require 'ox-latex)

(use-package org
  :ensure nil
  :mode ("\\.org\\'" . org-mode)
  :hook (org-mode . org-indent-mode)
  :config
  (add-hook 'before-save-hook 'time-stamp))

(with-eval-after-load 'org-indent
  (diminish 'org-indent-mode))
(setq org-ellipsis "⇲")
;; Other candidates:
;; (setq org-ellipsis "   📖")
;; (setq org-ellipsis "  ◦◦◦")
;; (setq org-ellipsis "  ⟨🫣⟩")
;; (setq org-ellipsis "  ⟨👀⟩")
;; (setq org-ellipsis " ⤵")

(setq org-babel-load-languages
      '((emacs-lisp . t)
        (org . t)
        (latex . t)
        (shell . t)))

(defun my/org-src-fix-angle-brackets ()
  "When editing emacs-lisp src blocks in org, disable < > paren pairing."
  (when (and (eq major-mode 'org-mode)
             (org-in-src-block-p)
             (string= (org-element-property :language (org-element-at-point)) "emacs-lisp"))
    (modify-syntax-entry ?< "." (syntax-table))
    (modify-syntax-entry ?> "." (syntax-table))))

(defun my/org-fix-paren-in-src ()
  "Hook for fixing < > parens only in elisp src blocks."
  (add-hook 'post-command-hook #'my/org-src-fix-angle-brackets nil t))

(add-hook 'org-mode-hook #'my/org-fix-paren-in-src)

(add-hook 'org-mode-hook 'display-line-numbers-mode)
(add-hook 'org-mode-hook 'visual-line-mode)
;; (add-hook 'org-mode-hook 'highlight-indent-guides-mode)

(setq org-src-fontify-natively t)        ;; 保持语法高亮
(setq org-src-tab-acts-natively t)       ;; Tab 正常缩进
(setq org-src-preserve-indentation t)    ;; 保持缩进
(setq org-src-window-setup 'split-window-below)

;; 禁止自动刷新源块内容到 Org buffer
;; (setq org-src-strip-leading-and-trailing-blank-lines t)

(use-package org-appear
  :ensure t
  :commands (org-appear-mode)
  :hook (org-mode . org-appear-mode)
  :config
  (setq org-hide-emphasis-markers t)  ; Must be activated for org-appear to work
  (setq org-appear-autoemphasis   t   ; Show bold, italics, verbatim, etc.
        org-appear-autolinks      t   ; Show links
        org-appear-autosubmarkers t)) ; Show sub- and superscripts

(setq org-directory (expand-file-name "~/Documents/Notes/org"))
(setq org-default-notes-file (concat org-directory "/mygtd.org"))
(setq org-agenda-files '("~/Documents/org/diary-by-months/"
                         "~/Documents/org/src/"))

(setq org-todo-keywords
      (quote ((sequence "TODO(t)" "|" "DONE(d)")
              (sequence "WAITING(w@/!)" "HOLD(h@/!)" "|" "CANCELLED(c@/!)"))))

(setq-default org-enforce-todo-dependencies t)

(setq-default org-todo-keyword-faces
              (quote (("TODO" :foreground "red" :weight bold)
                      ("DONE" :foreground "forest green" :weight bold)
                      ("WAITING" :foreground "orange" :weight bold)
                      ("HOLD" :foreground "magenta" :weight bold)
                      ("CANCELLED" :foreground "forest green" :weight bold)
                      ("MEETING" :foreground "forest green" :weight bold)
                      ("PHONE" :foreground "forest green" :weight bold))))

(global-set-key (kbd "C-c l") #'org-store-link)
(global-set-key (kbd "C-c a") #'org-agenda)
(global-set-key (kbd "C-c c") #'org-capture)
#+end_src

** Markdown

Need-to-have for programmers.

#+begin_src emacs-lisp
(use-package markdown-mode
  :commands (gfm-mode
             gfm-view-mode
             markdown-mode
             markdown-view-mode)
  :mode (("\\.markdown\\'" . markdown-mode)
         ("\\.md\\'" . markdown-mode)
         ("README\\.md\\'" . gfm-mode))
  :hook (markdown-mode . auto-fill-mode)
  :config
  (setq markdown-enable-highlighting-syntax t)
  (setq markdown-fontify-code-blocks-natively t)
  (setq markdown-enable-math t))
#+end_src

** TeX
*** Pre

#+begin_src emacs-lisp
(setenv "TEXINPUTS" (concat "~/Documents/Notes/TeX/cls//:~/Documents/Notes/TeX/assets//:" (getenv "TEXINPUTS")))
(setenv "BIBINPUTS" (concat "~/Documents/Notes/TeX/bib//" (getenv "BIBINPUTS")))

(defun my/latex-tab ()
  "Smart Tab for LaTeX:
1. indent
2. yasnippet expand/next field
3. cdlatex-style cursor jump"
  (interactive)
  (let ((orig-point (point)))
    ;; 正常缩进
    (indent-for-tab-command)
    ;; snippet 展开或跳转
    (when (= orig-point (point))
      (unless (yas-expand)
        (when (yas--snippets-at-point)
          (yas-next-field))))
    ;;  cdlatex 风格跳转
    (when (= orig-point (point))
      (catch 'stop
        ;; 初始前进一步（避免死循环）
        (forward-char 1)
        (while (re-search-forward "[ )}\n]\\|\\]" (point-max) t)
          (forward-char -1)
          (cond
           ;; 遇到空格 → 停在第一个空格（或行首）
           ((= (following-char) ?\ )
            (if (not (bolp)) (forward-char 1))
            (throw 'stop t))
           ;; 遇到换行 → 停在行首/行尾（但 \\ 例外）
           ((= (following-char) ?\n)
            (if (and (bolp) (not (eobp)))
                (throw 'stop t)
              (if (equal "\\\\" (buffer-substring-no-properties
                                 (- (point) 2) (point)))
                  (forward-char 1)
                (throw 'stop t))))
           ;; 遇到右括号 → 根据前面字符判断停前还是停后
           (t
            (if (or (= (char-syntax (preceding-char)) ?\()
                    (= (char-syntax (preceding-char)) ?\))
                    (= (preceding-char) ?-))
                (throw 'stop t)
              (forward-char 1)
              (if (looking-at "[^_^({[]")
                  (throw 'stop t))))))))))

;; (defun my/translate-fullwidth-to-halfwidth ()
;;   "Translate fullwidth punctuation to halfwidth."
;;   (setq-local key-translation-map
;;               (let ((keymap (make-sparse-keymap)))
;;                 (dolist (pair '(("。" . ".")
;;                                 ;; ("，" . ",")
;;                                 ;; ("；" . ";")
;;                                 ;; ("：" . ":")
;;                                 ;; ("【" . "[")
;;                                 ;; ("】" . "]")
;;                                 ;; ("「" . "{")
;;                                 ;; ("」" . "}")
;;                                 ;; ("（" . "(")
;;                                 ;; ("）" . ")")
;;                                 ;; ("！" . "!")
;;                                 ;; ("、" . "\\")
;;                                 ;; ("《" . "<")
;;                                 ;; ("》" . ">")
;;                                 ;; ("’" . "'")
;;                                 ;; ("“" . "\"")
;;                                 ;; ("”" . "\"")
;;                                 ;; ("¥" . "$")
;;                                 ;; ("？" . "?")
;;                                 ;; ("～" . "~")
;;                                 ;; ("— —" . "_")
;;                                 ;; ("… …" . "^")
;;                                 ;; ("·" . "`")
;;                                 ;; ("｜" . "|")
;;                                 ("‘" . "'")))
;;                   (define-key keymap (kbd (car pair)) (kbd (cdr pair))))
;;                 keymap)))

(defvar latex-brace-pairs
  '(("\\("       . "\\)")
    ("\\["       . "\\]")
    ("\\{"       . "\\}")
    ("("         . ")")
    ("["         . "]")
    ("{"         . "}")
    ("|"         . "|")
    ("\\|"       . "\\|")
    ("\\backslash" . "\\backslash")
    ("\\lfloor"  . "\\rfloor")
    ("\\lceil"   . "\\rceil")
    ("\\langle"  . "\\rangle")
    ("\\left("   . "\\right)")
    ("\\left["   . "\\right]")
    ("\\left\\{" . "\\right\\}")
    ("\\left|"   . "\\right|")
    ("\\left\\lfloor" . "\\right\\rfloor")
    ("\\left\\lceil"  . "\\right\\rceil")
    ("\\left\\langle" . "\\right\\rangle")
    ("\\left\\backslash" . "\\right\\backslash")
    ("\\left("   . "\\right.")
    ("\\left["   . "\\right.")
    ("\\left\\{" . "\\right.")
    ("\\left|"   . "\\right.")
    ("\\left."   . "\\right)")
    ("\\left."   . "\\right]")
    ("\\left."   . "\\right\\}")
    ("\\left."   . "\\right|")
    ("\\bigl("     . "\\bigr)")
    ("\\bigl["     . "\\bigr]")
    ("\\bigl\\{"   . "\\bigr\\}")
    ("\\Bigl("     . "\\Bigr)")
    ("\\Bigl["     . "\\Bigr]")
    ("\\Bigl\\{"   . "\\Bigr\\}")
    ("\\biggl("    . "\\biggr)")
    ("\\biggl["    . "\\biggr]")
    ("\\biggl\\{"  . "\\biggr\\}")
    ("\\Biggl("    . "\\Biggr)")
    ("\\Biggl["    . "\\Biggr]")
    ("\\Biggl\\{"  . "\\Biggr\\}")))

(require 'cl-lib)

(defun my/LaTeX-delete-pair-or-single ()
  "Delete LaTeX symbol or entire pair.
When cursor is after a LaTeX pair element, delete the entire element.
If paired items exist and contain only whitespace, delete the entire pair.
Prioritizes longer matches."
  (interactive)
  (let ((pos (point))
        (deleted nil)
        ;; 对pair列表按左项长度降序排序
        (sorted-pairs (sort (copy-sequence latex-brace-pairs)
                            (lambda (a b)
                              (> (length (car a)) (length (car b)))))))
    ;; 尝试匹配左项
    (catch 'left-match
      (dolist (pair sorted-pairs)
        (let* ((left-symbol (car pair))
               (left-len (length left-symbol)))
          (when (and (>= pos left-len)
                     (string= (buffer-substring-no-properties (- pos left-len) pos) left-symbol)
                     (not deleted))
            ;; 找到匹配的左项，遍历所有对应的右项
            (let ((matching-rights (mapcar 'cdr
                                           (cl-remove-if-not
                                            (lambda (p) (string= (car p) left-symbol))
                                            latex-brace-pairs))))
              ;; 按右项长度降序排序
              (setq matching-rights (sort matching-rights
                                          (lambda (a b) (> (length a) (length b)))))
              (catch 'right-found
                (dolist (right-symbol matching-rights)
                  (let ((right-len (length right-symbol))
                        (right-pos (save-excursion
                                     (goto-char pos)
                                     (search-forward right-symbol nil t))))
                    (when right-pos
                      ;; 检查中间内容是否全是空白
                      (let ((content (buffer-substring-no-properties pos (- right-pos right-len))))
                        (if (string-match-p "\\`[ \t\n\r]*\\'" content)
                            ;; 删除整个对
                            (progn
                              (delete-region (- pos left-len) right-pos)
                              (setq deleted t)
                              (throw 'right-found t))
                          ;; 继续尝试下一个右项
                          nil))))))
              ;; 如果没有找到匹配的右项或中间有内容，只删除左项
              (unless deleted
                (delete-region (- pos left-len) pos)
                (setq deleted t))
              (throw 'left-match t))))))
    ;; 如果没有匹配左项，尝试匹配右项
    (unless deleted
      ;; 对pair列表按右项长度降序排序
      (setq sorted-pairs (sort (copy-sequence latex-brace-pairs)
                               (lambda (a b)
                                 (> (length (cdr a)) (length (cdr b))))))
      (catch 'right-match
        (dolist (pair sorted-pairs)
          (let* ((right-symbol (cdr pair))
                 (right-len (length right-symbol)))
            (when (and (>= pos right-len)
                       (string= (buffer-substring-no-properties (- pos right-len) pos) right-symbol)
                       (not deleted))
              ;; 找到匹配的右项，遍历所有对应的左项
              (let ((matching-lefts (mapcar 'car
                                            (cl-remove-if-not
                                             (lambda (p) (string= (cdr p) right-symbol))
                                             latex-brace-pairs))))
                ;; 按左项长度降序排序
                (setq matching-lefts (sort matching-lefts
                                           (lambda (a b) (> (length a) (length b)))))

                (catch 'left-found
                  (dolist (left-symbol matching-lefts)
                    (let ((left-len (length left-symbol))
                          (left-pos (save-excursion
                                      (goto-char (- pos right-len))
                                      (search-backward left-symbol nil t))))
                      (when left-pos
                        ;; 检查中间内容是否全是空白
                        (let ((content (buffer-substring-no-properties (+ left-pos left-len) (- pos right-len))))
                          (if (string-match-p "\\`[ \t\n\r]*\\'" content)
                              ;; 删除整个对
                              (progn
                                (delete-region left-pos pos)
                                (setq deleted t)
                                (throw 'left-found t))
                            ;; 继续尝试下一个左项
                            nil))))))
                ;; 如果没有找到匹配的左项或中间有内容，只删除右项
                (unless deleted
                  (delete-region (- pos right-len) pos)
                  (setq deleted t))
                (throw 'right-match t)))))))
    ;; 如果都没有匹配，执行普通删除
    (unless deleted
      (call-interactively 'backward-delete-char-untabify))))
#+end_src

*** AUCTeX

#+begin_src emacs-lisp
(use-package tex
  :ensure auctex
  :mode ("\\.tex" . LaTeX-mode)
  :hook (LaTeX-mode . my/latex-mode-hook)
  :init
  (with-eval-after-load 'info
    (add-to-list 'Info-additional-directory-list
                 "/Users/baojie/.emacs.d/elpa/auctex-14.1.0/doc"))
  (setq TeX-output-dir ".LaTeXOut/")
  ;; /并不是必须的但是在my-auctex-after-compilation-copy-pdf函数中要".LaTeXAuto/"这个值
  (setq TeX-auto-local ".LaTeXAuto/")
  (setq TeX-auto-private "~/Documents/Notes/TeX/el")
  (setq TeX-style-private "~/Documents/Notes/TeX/cls/Style")

  ;; (if (string-match "address" flyspell-tex-command-regexp)
  ;;     (setq flyspell-tex-command-regexp flyspell-tex-command-regexp)
  ;;   (setq flyspell-tex-command-regexp (concat (substring flyspell-tex-command-regexp 0 83) "\\|address\\|author\\|title\\|thanks\\|bibliography\\(style\\)?\\|email\\|setlist\\|newtheorem\\|usetikzlibrary" (substring flyspell-tex-command-regexp 83))))
  ;; (put 'latex-mode 'flyspell-mode-predicate 'tex-mode-flyspell-verify)

  :config
  (setq TeX-clean-confirm nil)

  (setq TeX-parse-self t)
  (setq TeX-auto-save t)
  (setq-default TeX-master nil)

  (setq TeX-save-query nil)
  (setq TeX-command-extra-options "--shell-escape")
  (setq TeX-file-line-error t
        TeX-error-overview-open-after-TeX-run t)

  (setq TeX-source-correlate-mode t
        TeX-source-correlate-method 'synctex
        TeX-source-correlate-start-server t)

  (setq TeX-view-program-selection '((output-pdf "Skim"))
        TeX-view-program-list
        '(("Skim" "/Applications/Skim.app/Contents/SharedSupport/displayline -b %n %o %b")))

  (setq TeX-electric-sub-and-superscript t
        LaTeX-electric-left-right-brace t)

  (setq-default TeX-open-quote "``"
                TeX-closed-quote "''")
  (setq-default font-latex-fontify-script nil
                font-latex-fontify-sectioning 'color)
  (setq LaTeX-item-indent 0)
  ;; (setq TeX-ispell-extend-skip-list t)
  (setq-default TeX-PDF-mode t)

  ;; (setf (cadr (assoc "ChkTeX" TeX-command-list)) "chktex -q -v6 -n2 -n3 -n9 -n18 %s")

  (add-hook 'find-file-hook
            (lambda ()
              (when (eq major-mode 'latex-mode)
                (when (or (not (file-exists-p (buffer-file-name)))
                          (eq TeX-master 'shared))
                  (add-file-local-variable
                   'TeX-engine
                   (intern (completing-read "Add TeX-engine with value: "
                                            (mapcar 'car (TeX-engine-alist))
                                            nil nil nil nil "default"))))
                (TeX-update-style t))))

  (add-hook 'TeX-after-compilation-finished-functions
            (lambda (output-filename)
              (let ((pdf-file (concat TeX-output-dir (file-name-base output-filename) ".pdf"))
                    (out-pdf-file (concat (file-name-base output-filename) ".pdf")))
                (when (file-exists-p pdf-file)
                  (copy-file pdf-file out-pdf-file t)))))

  (add-hook 'LaTeX-mode-hook (lambda () (electric-indent-local-mode -1)))

  (defun my/latex-mode-hook ()
    (setq-local TeX-electric-math (cons "\\("  "\\)"))
    (local-set-key (kbd "DEL") 'my/LaTeX-delete-pair-or-single)
    (local-set-key (kbd "<tab>") 'my/latex-tab)
    (local-set-key (kbd "<S-s-mouse-1>") 'TeX-view)
    ;; (add-hook 'after-save-hook 'flyspell-buffer nil t)
    ;; (setq flyspell-generic-check-word-predicate 'tex-mode-flyspell-verify)
    ;; (setq-default ispell-parser 'tex)
    ;; (my/translate-fullwidth-to-halfwidth)
    (LaTeX-math-mode)
    (display-line-numbers-mode)
    ;; (highlight-indent-guides-mode)
    (visual-line-mode)
    ;; (electric-pair-mode)
    ;; (electric-indent-local-mode)
    (turn-on-auto-fill)
    ;; (turn-on-reftex)
    ;; (predictive-mode)
    ;; (flyspell-mode)
    ;; (eglot-ensure)
    (flymake-mode)
    (yas-minor-mode))

  (diminish 'yas-minor-mode)
  (diminish 'auto-fill-function))
#+end_src

*** refTeX

#+begin_src emacs-lisp
(use-package reftex
  :after latex
  :hook (LaTeX-mode . reftex-mode)
  :config
  (setq reftex-plug-into-AUCTeX t
        ;; reftex-texpath-environment-variables '((getenv "TEXINPUTS"))
        ;; reftex-bibpath-environment-variables '((getenv "BIBINPUTS"))
        reftex-default-bibliography '("~/Documents/Notes/TeX/bib/article.bib")
        reftex-insert-label-flags '(t t)
        ;; reftex-cite-format 'default
        reftex-level-indent 0
        reftex-toc-split-windows-horizontally t
        reftex-toc-split-windows-fraction .2)

  (setq LaTeX-reftex-cite-format-auto-activate nil)

  (setq reftex-cite-format
        '((?\C-m . "~\\cite{%l}")
          (?t    . "\\cite{%l}")
          (?n    . "\\nocite{%l}")))

  ;; (setq reftex-label-alist
  ;;       '(("axiom"       ?a "ax:"   "~\\ref{%s}" nil ("axiom"   "ax.") nil)
  ;;         ("definition"  ?d "def:" "~\\ref{%s}" t   ("definition" "def.") nil)
  ;;         ("theorem"     ?h "thm:"  "~\\ref{%s}" t   ("theorem" "thm.") nil)
  ;;         ("corollary"   ?c "cor:"  "~\\ref{%s}" t   ("corollary" "cor.") nil)
  ;;         ("proposition" ?p "prop:" "~\\ref{%s}" t   ("proposition" "prop.") nil)))

  (setq reftex-label-alist
        '((nil              ?e "eq:"    "~\\ref{%s}"   nil nil)
          ("lemma"          ?l "lem:"   "~\\ref{%s}"   t   ("lemma" "lem."))
          ("theorem"        ?h "thm:"   "~\\ref{%s}"   t   ("theorem" "th." "thm."))
          ("corollary"      ?c "cor:"   "~\\ref{%s}"   t   ("corollary" "cor."))
          ("conjecture"     ?j "conj:"  "~\\ref{%s}"   t   ("conjecture" "conj."))
          ("proposition"    ?p "prop:"  "~\\ref{%s}"   t   ("proposition" "prop."))
          ("claim"          ?m "clm:"   "~\\ref{%s}"   t   ("claim" "cl."))
          ("definition"     ?d "def:"   "~\\ref{%s}"   t   ("definition" "def."))
          ("remark"         ?r "rem:"   "~\\ref{%s}"   t   ("remark" "rem."))
          ("example"        ?x "exmp:"    "~\\ref{%s}"   t   ("example" "exmp."))
          ("exercise"       ?x "xca:"   "~\\ref{%s}"   t   ("exercise" "xca." "exerc." "ex."))
          ("enumerate"      ?i "item:"  "~\\ref{%s}"   t   ("part")))))
#+end_src

*** bibTeX

#+begin_src emacs-lisp
(use-package bibtex
  :mode (("\\.bib\\'" . bibtex-mode)))
#+end_src

** Keys

#+begin_src emacs-lisp
;; 解除不常用的快捷键定义
(global-set-key (kbd "C-z") nil)
(global-set-key (kbd "s-q") nil)
(global-set-key (kbd "s-x") nil)
(global-set-key (kbd "s-c") nil)
(global-set-key (kbd "s-v") nil)
(global-set-key (kbd "M-z") nil)
(global-set-key (kbd "M-m") nil)
(global-set-key (kbd "C-x C-z") nil)
(global-set-key [mouse-2] nil)

;; macOS-styled keybindings
(keymap-global-set "s-a" #'mark-whole-buffer)
(keymap-global-set "s-c" #'kill-ring-save)
(keymap-global-set "s-v" #'yank)
(keymap-global-set "s-x" #'kill-region)
(keymap-global-set "s-q" #'save-buffers-kill-emacs)
(keymap-global-set "s-s" #'save-buffer)
(keymap-global-set "s-w" #'kill-current-buffer)
(keymap-global-set "s-e" #'delete-window)
(keymap-global-set "s-r" #'restart-emacs)
(keymap-global-set "s-z" #'undo)
(keymap-global-set "s-d" #'find-file)

(global-set-key (kbd "C-<end>") nil)

(global-set-key (kbd "M-j") #'duplicate-dwim)

(global-set-key (kbd "M-`") #'menu-bar-mode)

;; kill up to character
(global-set-key (kbd "M-z") #'zap-up-to-char)

;; make "c-z" available as a prefix key in the same manner as "c-x" and "c-c"
;; (global-unset-key [swipe-left])
;; (global-unset-key [swipe-right])

(global-unset-key "\C-z")
(global-unset-key "\C-x\C-z")
;; (global-unset-key (kbd "C-<end>"))
;; (global-unset-key (kbd "<left>"))
;; (global-unset-key (kbd "<right>"))
;; (global-unset-key (kbd "<up>"))
;; (global-unset-key (kbd "<down>"))
;; (global-unset-key (kbd "<C-left>"))
;; (global-unset-key (kbd "<C-right>"))
;; (global-unset-key (kbd "<C-up>"))
;; (global-unset-key (kbd "<C-down>"))
(global-unset-key (kbd "<M-left>"))
(global-unset-key (kbd "<M-right>"))
(global-unset-key (kbd "<M-up>"))
(global-unset-key (kbd "<M-down>"))
(global-unset-key (kbd "<C-wheel-down>"))
(global-unset-key (kbd "<C-wheel-up>"))

;; Makes <escape> quit as much as possible.
(define-key global-map
            (kbd "<escape>") 'keyboard-escape-quit)
(define-key minibuffer-local-map
            (kbd "<escape>") 'keyboard-escape-quit)
(define-key minibuffer-local-ns-map
            (kbd "<escape>") 'keyboard-escape-quit)
(define-key minibuffer-local-completion-map
            (kbd "<escape>") 'keyboard-escape-quit)
(define-key minibuffer-local-must-match-map
            (kbd "<escape>") 'keyboard-escape-quit)
(define-key minibuffer-local-isearch-map
            (kbd "<escape>") 'keyboard-escape-quit)

;;; buffers
;; <https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#buffers>

;; kill the current buffer immediately instead of presenting a selection
;; it's the equivalent to "close tab" in a web browser or other editors
;; (global-set-key (kbd "C-x k") #'kill-current-buffer)

(global-set-key (kbd "C-x C-b") 'ibuffer)

;;; search
;; <https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#search>
(setq search-whitespace-regexp "[-_ \t\n]+")
;; switch search functions to make regex-search the default
(global-set-key (kbd "C-s") #'isearch-forward-regexp)
(global-set-key (kbd "C-r") #'isearch-backward-regexp)
(global-set-key (kbd "C-S-s") #'isearch-forward)
(global-set-key (kbd "C-S-r") #'isearch-backward)

;; search and replace
(global-set-key (kbd "M-%") #'query-replace-regexp)
(global-set-key (kbd "C-M-%") #'replace-regexp)
#+end_src

** Which-key

[[https://github.com/justbur/emacs-which-key][which-key]] 会在小缓冲区显示可用的按键绑定。当你开始输入命令时，它会显示接下来可能的操作路径。

#+begin_src emacs-lisp :tangle no
(use-package which-key
  :ensure nil)

  (setq which-key-show-early-on-C-h t
        which-key-idle-delay 0.25)
  (setq which-key-popup-type 'minibuffer)

  ;; (which-key-setup-minibuffer)
  (which-key-mode)
  (setq which-key-sort-order 'which-key-key-order)

  (setq which-key-add-column-padding 3)

  (setq which-key-max-display-columns 3)
  (setq which-key-max-description-length 31)

  (setq which-key-separator " ↝ " )
  (setq which-key-unicode-correction 3)

  (setq which-key-prefix-prefix "+" )

  (setq which-key-special-keys nil)

  (setq which-key-show-prefix 'top)

  ;; Set to t to show the count of keys shown vs. total keys in the mode line.
  (setq which-key-show-remaining-keys nil)

(add-to-list 'which-key-replacement-alist '(("TAB" . nil) . ("↹" . nil)))
(add-to-list 'which-key-replacement-alist '(("RET" . nil) . ("⏎" . nil)))
(add-to-list 'which-key-replacement-alist '(("DEL" . nil) . ("⇤" . nil)))
(add-to-list 'which-key-replacement-alist '(("SPC" . nil) . ("␣" . nil)))
#+end_src

** Server

#+begin_src emacs-lisp :tangle no
(use-package server
  :ensure nil
  :commands server-start
  :hook
  (after-init . server-start))
#+end_src

#+begin_src emacs-lisp
(provide 'init)
;;; init.el ends here
#+end_src
